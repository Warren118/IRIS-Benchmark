# -*- coding: utf-8 -*-
"""
IRIS-MBTI Personality Profiling Script

This script reads the final dimensional scores generated by 'evaluate.py'
and assigns an IRIS-MBTI personality profile to each model for both
Generation and Understanding tasks, based on the rules defined in Appendix A.3
of the paper.
"""
import pandas as pd
import os
import argparse


class ProfilingConfig:
    """Configuration for the profiling script."""
    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    EVAL_RESULTS_DIR = os.path.join(PROJECT_ROOT, "results", "final_evaluation")
    INPUT_SCORES_FILE = os.path.join(EVAL_RESULTS_DIR, "final_dimensional_scores.csv")
    OUTPUT_FILE = os.path.join(EVAL_RESULTS_DIR, "final_mbti_profiles.csv")

    # The performance threshold (tau) defined in the paper (Appendix A.3.2)
    INAUGURAL_THRESHOLD = 60.0


def assign_personality(scores: pd.Series, threshold: float) -> str:
    """Assigns the three-letter personality code based on scores."""

    # Dimension 1: Foundational Belief (IFS)
    p1 = 'U' if scores.get('IFS', 0) >= threshold else 'H'

    # Dimension 2: Environmental Perception (RFS)
    p2 = 'A' if scores.get('RFS', 0) >= threshold else 'D'

    # Dimension 3: Willpower (BIS)
    p3 = 'F' if scores.get('BIS', 0) >= threshold else 'R'

    return f"{p1}{p2}{p3}"


def main(args):
    """Main function to run the profiling."""
    print("=" * 50)
    print("  Running IRIS-MBTI Personality Profiling  ")
    print("=" * 50)

    try:
        df_scores = pd.read_csv(args.input_file)
    except FileNotFoundError:
        print(f"\n[ERROR] Input file not found at: '{args.input_file}'")
        print("Please run 'evaluate.py' first to generate the dimensional scores.")
        return

    profiles = []
    for _, row in df_scores.iterrows():
        model_name = row['model']

        # Profile for Generation Task
        gen_scores = pd.Series({'IFS': row.get('IFS_Gen'), 'RFS': row.get('RFS_Gen'), 'BIS': row.get('BIS_Gen')})
        gen_profile = assign_personality(gen_scores, args.threshold)

        # Profile for Understanding Task
        und_scores = pd.Series({'IFS': row.get('IFS_Und'), 'RFS': row.get('RFS_Und'), 'BIS': row.get('BIS_Und')})
        und_profile = assign_personality(und_scores, args.threshold)

        profiles.append({
            'model': model_name,
            'Gen_Profile': gen_profile,
            'Und_Profile': und_profile
        })

    df_profiles = pd.DataFrame(profiles)

    # Merge with original scores for a comprehensive report
    df_final_report = pd.merge(df_scores, df_profiles, on='model')

    # Save the report
    df_final_report.to_csv(args.output_file, index=False, float_format="%.2f")

    print("\n>>> Personality Profiling Complete.")
    print(df_final_report.to_string())
    print(f"\nResults saved to: {args.output_file}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Assign IRIS-MBTI personality profiles to models.")
    parser.add_argument('--input_file', type=str, default=ProfilingConfig.INPUT_SCORES_FILE,
                        help="Path to the input CSV file with dimensional scores.")
    parser.add_argument('--output_file', type=str, default=ProfilingConfig.OUTPUT_FILE,
                        help="Path to save the output CSV file with profiles.")
    parser.add_argument('--threshold', type=float, default=ProfilingConfig.INAUGURAL_THRESHOLD,
                        help="The performance threshold (tau) for classification.")
    args = parser.parse_args()
    main(args)
